{"pageProps":{"publications":[{"id":"https://medium.com/p/cbf6741337d","title":"Micro Frontends in A Nutshell","author":"mdworld","latestPublishedAt":"Fri, 08 Apr 2022 06:56:06 GMT","uniqueSlug":"https://medium.com/codestar-blog/micro-frontends-in-a-nutshell-cbf6741337d?source=rss----ea5cff13e3c9---4","paragraphs":"<p>You may have heard of a Micro Frontends recently and felt it a bit difficult to grasp what exactly it is and if it is something you should get involved in. I’ll try to give a summary of the what, why, how, and when of the current state. To provide a high-over summary, I’ll also add some recommended reading if you would like to get more details.</p><h3>Why use Micro Frontends?</h3><p>Do you have a very large front-end code-base?</p><p>And by large, I’m talking about 50+ developers in a dozen of teams or more, probably cross-department, working on the same code-base in some manner. Do you have enterprise-scale continuous integration with e.g. GitLab, Bamboo running so many pipelines that the bottleneck is no longer a matter of adding more pods? Do you employ configuration managers or an Ops department to make sure deployments won’t affect each other too much? Do you have considerable codebases in incompatible front-end stacks, e.g. because of a migration from AngularJS to Angular >2?</p><p>Then chances are you need to use Micro Frontends. Or actually, you most probably are <em>already</em> using Micro Frontends.</p><h3>What are Micro Frontends?</h3><p>How is it possible you would not know you are using Micro Frontends? And why are we just now hearing so much about them? The truth is that although the term is relatively new it actually covers <strong>any range of solutions to integrate a collection of smaller frontends into one application</strong>.</p><p>Similar to Micro Service architectures, Micro Frontends facilitate large codebases by breaking them up into manageable pieces. This means:</p><ul><li>Technological stack across Micro Frontends in the same application may differ</li><li>A Micro Frontend has a clear and concise purpose, following the SOLID principles</li><li>Teams of developers maintain one or more Micro Frontend that are isolated in runtime from the rest of the code</li></ul><p>The term is now popularized because of the advent of <em>Module Federation</em> in Webpack 5. Webpack 5 has been released towards the end of 2020, but this new major release is taking some time to be integrated in relevant tooling, e.g. Nx and Ng CLI.</p><p>Note that Micro Frontends (MFEs) are sometimes also referred to as <em>Micro Apps</em>.</p><h3>How do you build Micro Frontends?</h3><p>Since Micro Frontends as a concept are not new, some solutions that can be classified as Micro Frontends are ancient, considering the speed of development in the frontend ecosystem. Here are some of them, to give an idea of how broad Micro Frontends can be interpreted:</p><ul><li>Run several frontend applications on different URLs and cross refer them with plain <strong>hyperlinks</strong></li><li>Run several frontend applications on different URLs on the same page in <strong>iframes</strong></li><li>Develop frontend components in separate teams and integrate them at build time to be deployed as a <strong>deployment monolith</strong></li><li>Use macro <strong>Web Components</strong> as an abstraction layer for components</li><li>Develop frontend components in separate teams and integrate them at runtime with <strong>Module Federation</strong></li></ul><p>I won’t go into all the details about the pros and cons of each of these solutions. Instead I refer you to the recommended reading list below.</p><p>Note that solutions can be combined: you can have a deployment monolith (that expects components that are all using the same stack) but wrap components in Web Components to provide an abstraction layer and use different stacks to produce the Web Components. Additionally, you can use Web Components in combination with Module Federation for instance if you are migrating towards Module Federation as a Micro Frontends solution. Consider this schematic representation of a web application:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pql8S-NvSjqcqruEhI9mSw.png\" /><figcaption>Schematic representation of a web application</figcaption></figure><p>This could be implemented with different platforms like Angular and React by wrapping them in Web Components:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sJHpfDClwKyFoaIpNp6sgg.png\" /><figcaption>Web Components diagram</figcaption></figure><p>Module Federation is the newest solution and many libraries are still adapting to it. Last year, Nx 12 released with support for Webpack 5 and Module Federation. See a real working example here <a href=\"https://code-star.github.io/nx-reference-shell/\">https://code-star.github.io/nx-reference-shell/</a> or its source in <a href=\"https://github.com/code-star/nx-reference\">https://github.com/code-star/nx-reference</a>.</p><p>Because Micro Frontends break up a codebase into smaller, more manageable fragments, they are often mentioned in combination with Monorepo solutions like Nx or yarn/npm workspaces. However, it is perfectly possible to implement Micro Frontends without monorepos!</p><h3>When to use Micro Frontends?</h3><p>New technology inspires developers to experiment, but Micro Frontends and with that Module Federation are not worth the upkeep for small to medium applications. All-in solutions like Next or Gatsby are great fits for smaller applications and custom Angular applications, when well organized, scale very well up to enterprise level.</p><p>However, no framework inherently supports older versions of itself. So if a big bang migration from AngularJS to Angular or any other framework for that matter, you’ll end up with some kind of Micro Frontends solution. Plenty of enterprise codebases currently use some combination of hyperlinks and deployment monoliths.</p><p>This could look like a bank that offers a set of public pages (e.g. the general home page, and the landing pages of its departments) referencing each other with hyperlinks and a protected monolith app with many components (e.g. checking account, subscriptions to bank products, investments on one page).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QJZ-f4Ptx1_eZ24nLZ4Kow.png\" /><figcaption>Hyperlinks and Monolith diagram</figcaption></figure><p>Exploring Module Federation can be worth it if continuous integration is slowed down too much because of the large amounts of tests and compilation of all the involved components. But note that there are other approaches, such as using Nx monorepos with properly set up hierarchy and running only affected tests.</p><p>Another reason to use Module Federation can be the need to support multiple frameworks. Compared to Web Components, Module Federation improves the runtime isolation of components while simultaneously reducing isolation of shared dependencies to reduce the overall footprint of the application.</p><p>Compare to the diagram for the earlier example using macro Web Components, you can see that lodash, Angular and React are only loaded once, despite being used by multiple isolated components:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WqOZsQ8xnX1iJg3PPHcilg.png\" /><figcaption>Module Federation diagram</figcaption></figure><h3>Want to know more?</h3><p>If you want to know more about Micro Frontends, Module Federation or Monorepos, you can contact met at <a href=\"https://twitter.com/mdworldNL\">@mdworldNL</a> on Twitter or mail codestar@ordina.nl. We have experience with enterprise frontend at all the major banks and many governmental departments in the Netherlands.</p><p>When you want more background information as a developer, you can also read the articles provided below.</p><h3>Recommended in-depth reading</h3><ul><li>Introduction to Micro Frontends: <a href=\"https://micro-frontends.org/\">https://micro-frontends.org/</a></li><li>Introduction to Micro Frontends: <a href=\"https://martinfowler.com/articles/micro-frontends.html\">https://martinfowler.com/articles/micro-frontends.html</a></li></ul><p>Angular Architects:</p><ul><li>Micro Frontends introduction: <a href=\"https://www.angulararchitects.io/en/aktuelles/a-software-architects-approach-towards/\">https://www.angulararchitects.io/en/aktuelles/a-software-architects-approach-towards/</a></li><li>Micro Frontends series: <a href=\"https://www.angulararchitects.io/en/aktuelles/micro-apps-with-web-components-using-angular-elements/\">https://www.angulararchitects.io/en/aktuelles/micro-apps-with-web-components-using-angular-elements/</a></li><li>Module Federation series: <a href=\"https://www.angulararchitects.io/en/aktuelles/the-microfrontend-revolution-module-federation-in-webpack-5/\">https://www.angulararchitects.io/en/aktuelles/the-microfrontend-revolution-module-federation-in-webpack-5/</a></li></ul><p>By my colleague Peter Eijgermans:</p><ul><li>Micro Frontends by Example: <a href=\"https://dzone.com/articles/micro-frontends-by-example-8\">https://dzone.com/articles/micro-frontends-by-example-8</a></li><li>(Video) Micro Frontends: The What, the Why and the How by Peter Eijgermans <a href=\"https://youtu.be/TWcoziCdPkE\">https://youtu.be/TWcoziCdPkE</a></li></ul><p>This article was originally published at <a href=\"https://mdworld.nl/micro-frontends-in-a-nutshell\">https://mdworld.nl/micro-frontends-in-a-nutshell</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cbf6741337d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/micro-frontends-in-a-nutshell-cbf6741337d\">Micro Frontends in A Nutshell</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},{"id":"https://medium.com/p/befc396d6dc5","title":"Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM (Scala, Java…","author":"Nathan Perdijk","latestPublishedAt":"Fri, 06 Nov 2020 15:14:42 GMT","uniqueSlug":"https://medium.com/codestar-blog/tika-nerding-getting-started-using-named-entity-recognition-with-opennlp-on-the-jvm-scala-java-befc396d6dc5?source=rss----ea5cff13e3c9---4","paragraphs":"<h3>Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM (Scala, Java, Kotlin…)</h3><p><em>For DataScience!</em></p><p>Some things are hard, some things are not… Turns out that doing NER (Named-Entity Recognition) on the JVM is… not! (Wait, <a href=\"https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397\"><em>that sounds familiar</em></a>…)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/292/1*QvLkMzKtFw0DxqZ-pWiL8g.jpeg\" /></figure><p><a href=\"https://en.wikipedia.org/wiki/Named-entity_recognition\">NER</a> is the automated process of annotating words and phrases in sentences with relevant entity information, such as marking a word as a Person, or a Location. This can come in quite handy when doing automated text analysis and is a staple in the DataScience community. As the trouble with DataScience is often getting it into production, it is extremely handy that this technique can be directly used from JVM-languages. Now we can embed this technology in production ready applications built in Java, Scala, Kotlin...</p><p>First things first, the dependencies. These are all the dependencies from the .pom.xml file used for this example project:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/263fe830248a9ab31ed27dc9f4c55d4f/href\">https://medium.com/media/263fe830248a9ab31ed27dc9f4c55d4f/href</a></iframe><p>Yes, that’s it.</p><p>For doing NER on String this is really all we need, but Apache Tika can also extract text from PDFs or even <a href=\"https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397\">perform OCR</a>, but you’ll need additional dependencies.</p><p>Then we need to download the models that we want to use and place them in our resources folder. You can download suitable OpenNLP models from <a href=\"http://opennlp.sourceforge.net/models-1.5/\">http://opennlp.sourceforge.net/models-1.5/</a>. These are conveniently wrapped in .bin format and should NOT be unpacked.</p><p>For this example, we will be using English language Models that can recognise Date, Location, Organization and Person, but there are also models available in other languages. Every model you want to use, you’ll need to add to a Java Map (or you can use SystemProperties for Tika to “discover”, but that’s a method I don’t like very much):</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/900c319c1e33e98775dfd07672bb5099/href\">https://medium.com/media/900c319c1e33e98775dfd07672bb5099/href</a></iframe><p>Now models contains four models, so let’s feed them to Tika:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/addf4d01e6a3f6ef13603e4498d38934/href\">https://medium.com/media/addf4d01e6a3f6ef13603e4498d38934/href</a></iframe><p>Alright, now all we need is to feed a String of text to the nerRecogniser:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/107c4b2797d7b06aee4d6160c7fd37e9/href\">https://medium.com/media/107c4b2797d7b06aee4d6160c7fd37e9/href</a></iframe><p>And now you can just go about using the results. Tika will return a Map, containing a key for each model that has managed to find matching results, and with each key there’s a value containing those results. In order to improve the prints, I’ve done a bit of tinkering as it is now DEMO time.</p><p>I’m using the contents of the <a href=\"https://en.wikipedia.org/\">Wikipedia</a> article on the <a href=\"https://en.wikipedia.org/wiki/Peace_of_Utrecht\">Peace of Utrecht</a>.</p><p>For the first paragraph, this is my input text:</p><pre>\"The Peace of Utrecht is a series of peace treaties signed by the belligerents in the War of the Spanish Succession, in the Dutch city of Utrecht between April 1713 and February 1715. The war involved three contenders for the vacant throne of Spain, and involved much of Europe for over a decade. The main action saw France as the defender of Spain against a multinational coalition. The war was very expensive and bloody and finally stalemated. Essentially, the treaties allowed Philip V (grandson of King Louis XIV of France) to keep the Spanish throne in return for permanently renouncing his claim to the French throne, along with other necessary guarantees that would ensure that France and Spain should not merge, thus preserving the balance of power in Europe.\\n\\nThe treaties between several European states, including Spain, Great Britain, France, Portugal, Savoy and the Dutch Republic, helped end the war. The treaties were concluded between the representatives of Louis XIV of France and of his grandson Philip on one hand, and representatives of Anne of Great Britain, Victor Amadeus II of Sardinia, John V of Portugal and the United Provinces of the Netherlands on the other. Though the king of France ensured the Spanish crown for his dynasty, the treaties marked the end of French ambitions of hegemony in Europe expressed in the continuous wars of Louis XIV, and paved the way to the European system based on the balance of power.[1] British historian G. M. Trevelyan argues:\\n\\nThat Treaty, which ushered in the stable and characteristic period of Eighteenth-Century civilization, marked the end of danger to Europe from the old French monarchy, and it marked a change of no less significance to the world at large, — the maritime, commercial and financial supremacy of Great Britain.[2]\\n\\nAnother enduring result was the creation of the Spanish Bourbon Dynasty, still reigning over Spain up to the present while the original House of Bourbon has long since been dethroned in France.\"</pre><p>And these are the results from Tika NER:</p><pre>Locations: Britain, Milan, Nova Scotia, Cape Breton, Italy, France, Africa, Sicily, North Sea, North America, Amazon, Spain, Rastatt, Portugal, Sacramento, North</pre><pre>Organisations: Article XIII, Spain</pre><pre>Persons: Philip V, Philippe, Philip, Louis XIV's, Louis XV, Charles VI., Oyapock, Saint Kitts</pre><pre>Date: 1713, 1720, 1713., 1712, 1714</pre><p>And a second example, the second part of the article:</p><pre>\"The War of the Spanish Succession was occasioned by the failure of the Habsburg king, Charles II of Spain, to produce an heir. Dispute followed the death of Charles II in 1700, and fourteen years of war were the result.\\n\\nFrance and Great Britain had come to terms in October 1711, when the preliminaries of peace had been signed in London. The preliminaries were based on a tacit acceptance of the partition of Spain's European possessions. Following this, the Congress of Utrecht opened on 29 January 1712, with the British representatives being John Robinson, Bishop of Bristol, and Thomas Wentworth, Lord Strafford.[3] Reluctantly the United Provinces accepted the preliminaries and sent representatives, but Emperor Charles VI refused to do so until he was assured that the preliminaries were not binding. This assurance was given, and so in February the Imperial representatives made their appearance. As Philip was not yet recognized as its king, Spain did not at first send plenipotentiaries, but the Duke of Savoy sent one, and the Kingdom of Portugal was represented by Luís da Cunha. One of the first questions discussed was the nature of the guarantees to be given by France and Spain that their crowns would be kept separate, and little progress was made until 10 July 1712, when Philip signed a renunciation.[4]\\n\\nWith Great Britain, France and Spain having agreed to a \\\"suspension of arms\\\" (armistice) covering Spain on 19 August in Paris, the pace of negotiation quickened. The first treaty signed at Utrecht was the truce between France and Portugal on 7 November, followed by the truce between France and Savoy on 14 March 1714. That same day, Spain, Great Britain, France and the Empire agreed to the evacuation of Catalonia and an armistice in Italy. The main treaties of peace followed on 11 April 1713. These were five separate treaties between France and Great Britain, the Netherlands, Savoy, Prussia and Portugal. Spain under Philip V signed separate peace treaties with Savoy and Great Britain at Utrecht on 13 July. Negotiations at Utrecht dragged on into the next year, for the peace treaty between Spain and the Netherlands was only signed on 26 June 1714 and that between Spain and Portugal on 6 February 1715.[5]\\n\\nSeveral other treaties came out of the congress of Utrecht. France signed treaties of commerce and navigation with Great Britain and the Netherlands (11 April 1713). Great Britain signed a like treaty with Spain (9 December 1713).[5]\"</pre><p>And the results:</p><pre>Locations: 1715.[16], Britain, Spanish Netherlands, Austrian Netherlands, France</pre><pre>Organisations: Oxford, House of, United Provinces, Dutch, Austro-Dutch Barrier Treaty, Harley, Duke, Earl, Allied</pre><pre>Persons: Robert Harley, William III, Earl</pre><pre>Date: 1710, 1709., May 1711), 1706</pre><p>As you can see, not everything is found, or classified correctly, but it provides a good starting point for further text analysis and it took very little effort to get this working at all! Named-Entity Recognition is a tricky technique, so you may need to preprocess your texts a bit before you get good analysis results for your particular data set, but it’s definitely not difficult to get started.</p><p>You can download suitable OpenNLP models from <a href=\"http://opennlp.sourceforge.net/models-1.5/\">http://opennlp.sourceforge.net/models-1.5/</a>.</p><p>Check out the <a href=\"https://tika.apache.org/\">Apache Tika documentation</a> to see what other great functionality is available.</p><p>If you want to take a closer look at this example, you can check it out from Github: <a href=\"https://github.com/NRBPerdijk/examplenertikascala/\">https://github.com/NRBPerdijk/examplenertikascala/</a></p><p>Last but not least, kudos to the Apache Software Foundation for their continuing work towards great Open Source solutions.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*cQGXudGNVjRGDM2uB-BuGA.jpeg\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=befc396d6dc5\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/tika-nerding-getting-started-using-named-entity-recognition-with-opennlp-on-the-jvm-scala-java-befc396d6dc5\">Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM (Scala, Java…</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},{"id":"https://medium.com/p/f5d2bfe9b397","title":"Tika Tika! Getting started doing OCR with Apache Tika andTesseract from the JVM","author":"Nathan Perdijk","latestPublishedAt":"Fri, 10 Apr 2020 15:29:03 GMT","uniqueSlug":"https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397?source=rss----ea5cff13e3c9---4","paragraphs":"<h3>Tika Tika! Getting started doing OCR with Apache Tika andTesseract from the JVM (Scala, Java, Kotlin…).</h3><p><em>I can do DataScience, mate!</em></p><p>Some things are hard. Some things are not… Turns out that using OCR (Object Character Recognition) using Tesseract from the JVM is… not hard!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/292/1*Aj8UgvxNf7r4zTjs-JqL7A.jpeg\" /></figure><p>The trickiest part, really, is <a href=\"https://github.com/tesseract-ocr/tesseract/wiki\">setting up Tesseract</a> on the machine you want to do your OCR on. Once you have managed to do that, you can just use the following Scala examples to use <strong>Apache Tika</strong> to do OCR in your own JVM project.</p><h4><strong>First things first. Taking care of your dependencies…</strong></h4><p>Add these to your pom.xml or other build tool equivalent:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ef00268a7d4395d5285646425ef161fa/href\">https://medium.com/media/ef00268a7d4395d5285646425ef161fa/href</a></iframe><h4>Then, we need to properly configure a Tika Parser</h4><p>We need one in order to do actually do any <a href=\"https://tika.apache.org/1.24/parser.html\">parsing</a>. Because this kind of configuration tends to be ugly, I have put it all inside its own object/class to keep it separate from the rest of the code:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d06b778f674cc7ebfa6c0d5ac31584fb/href\">https://medium.com/media/d06b778f674cc7ebfa6c0d5ac31584fb/href</a></iframe><p>Finally, we have to create…</p><h4>The code that provides the file to be OCRed.</h4><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/97fa286ad55672dc413e9eb32a7c5e78/href\">https://medium.com/media/97fa286ad55672dc413e9eb32a7c5e78/href</a></iframe><p>We just turn the file we want to OCR into an InputStream and hand that off to the TikaOCRParser we specified above for parsing. Because using InputStreams and doing parsing are two IO processes that can (definitely) throw Exceptions, I have delegated the handling of the InputStream using Scala’s Using functionality, which will automatically wrap the whole operation into a Try while also making sure that the InputStream is closed when everything is done, <em>even when exceptions are thrown</em>. If the result is a Success, I convert it into a regular String, which can then be printed, or otherwise used at your convenience.</p><p><em>(The example file is a </em><em>jpeg, but lots of different image formats, as well as </em><em>PDF, are supported. Some, like </em><em>JPEG2000, might require extra supporting software to be installed on the machine.)</em></p><p>So, that’s it. Pretty easy, right? Check out the <a href=\"https://tika.apache.org/\">Apache Tika documentation</a> to see what other great functionality is available. Tesseract OCR is a pretty tricky field in and off itself, so be sure to check out all the <a href=\"https://tesseract-ocr.github.io/tessdoc/ImproveQuality\">tweaks</a> you may have to make for your particular dataset. If you want to see the full code for this example, you can <a href=\"https://github.com/NRBPerdijk/tikascalaexample\">check it out on GitHub</a>. Last but not least, kudos to the Apache Software Foundation for their continuing work towards great Open Source solutions.</p><p>Edit: I also wrote a short intro using Apache Tika to do Named-Entity Recognition (NER): <a href=\"https://medium.com/codestar-blog/tika-nerding-getting-started-using-named-entity-recognition-with-opennlp-on-the-jvm-scala-java-befc396d6dc5\">Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*P93TyWUqN0foFjmMaB0ehQ.jpeg\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f5d2bfe9b397\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397\">Tika Tika! Getting started doing OCR with Apache Tika andTesseract from the JVM</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},{"id":"https://medium.com/p/65158c284034","title":"Upgrading to Angular 9: My experience","author":"Bjorn ‘Bjeaurn’","latestPublishedAt":"Fri, 14 Feb 2020 12:32:47 GMT","uniqueSlug":"https://medium.com/codestar-blog/upgrading-to-angular-9-my-experience-65158c284034?source=rss----ea5cff13e3c9---4","paragraphs":""},{"id":"https://medium.com/p/2aeff1303749","title":"Leibniz equality in TypeScript","author":"Werner de Groot","latestPublishedAt":"Tue, 25 Jun 2019 16:21:37 GMT","uniqueSlug":"https://medium.com/codestar-blog/leibniz-equality-in-typescript-2aeff1303749?source=rss----ea5cff13e3c9---4","paragraphs":"<p>In this post I’ll explain how you can use Leibniz equality to safely type your higher-order components in React, although it can be used in many other places (outside the React ecosystem) too.</p><h3>Introduction</h3><p>At the client I’m currently working for we use a lot of different charts to visualize processes over time. We have line charts, Gantt charts, you name it. Each of those charts features buttons which allows users to zoom in or out.</p><p>I’d like to use a simplified version of one of those graphs to explain what Leibniz, a German mathematician who lived well over 300 years ago, has to do with TypeScript.</p><h3>Motivating example</h3><p>Let’s suppose our graph looks a bit like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/494/1*iBVlr8lOKvIzbqA8-qvHoQ.gif\" /></figure><p>I use a component Graph which takes the following props:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8fd6625d7338ffb2d8f27ee8923b427f/href\">https://medium.com/media/8fd6625d7338ffb2d8f27ee8923b427f/href</a></iframe><p>What do we need to show a graph? We need:</p><ul><li>activities to show;</li><li>dayStart and dayEnd, which specify the range of the time axis;</li><li>onZoomIn and onZoomOut to control the range of the time axis from inside the component.</li></ul><h3>Zooming in and out</h3><p>In this aside, I’d like to show you the function that handles zooming in or out. It’s not really relevant to the rest of the story (and you can skip this if you like) but it might come in handy if you wish to code along with this blog post.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5d62a026746da4ee205c6b5d1cfd0f52/href\">https://medium.com/media/5d62a026746da4ee205c6b5d1cfd0f52/href</a></iframe><h3>Higher-order component</h3><p>Although it is tempting to let this component manage its own dayStart and dayEnd (especially now that we can use hooks), it has two benefits to manage that state externally:</p><ul><li>I can easily expose the component to different states, which makes it easy to test;</li><li>I can change that state from the outside if I need to (for instance to ensure that all visible charts share the same time axis).</li></ul><p>If I would create a higher-order component (HOC) to manage that state for me, I would get the best of both worlds. I get an easy to use component which manages its own state if I wrap Graph in this HOC, but I get a lot of power if I choose not to.</p><p>Furthermore, I can apply this HOC to many other components which have a time axis and support some form of zooming in and out.</p><p>What should this HOC look like? What is the input? And what is the output?</p><ul><li>The component that we pass to the HOC (the “inner component”) should have some props provided automatically by the component that the HOC produces (the “outer component”).</li><li>The outer component should forward any other props to the inner component. Those are the only props that we need to provide to the outer component.</li><li>TypeScript should be able to infer all of this automatically.</li></ul><p>The HOC we will write will provide the following props to the inner component (which we’ll call Inner in what follows):</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8b76ef6710a77582a8ae8b0555d101f8/href\">https://medium.com/media/8b76ef6710a77582a8ae8b0555d101f8/href</a></iframe><p>It will produce a component (which we’ll call Outer from now on) that takes the following props¹:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/15ab60303123509b5c6b4e048ea753d3/href\">https://medium.com/media/15ab60303123509b5c6b4e048ea753d3/href</a></iframe><p>This might be a bit intimidating. What this says is that we can determine the props to the outer component (OuterProps) from the props to the inner component (InnerProps) by removing all values that are shared with TimeAxisProps (dayStart, dayEnd, onZoomIn and onZoomOut to be precise)².</p><p>Now that we know what the HOC should do, we can focus on <em>how</em> it should do it:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/dc85cb534801d0ca89ae3c215069e433/href\">https://medium.com/media/dc85cb534801d0ca89ae3c215069e433/href</a></iframe><p>That’s a big piece of code! We can see how to handle zooming in and zooming out. We can also see how we can combine both the OuterProps and the TimeAxisProps to render the Inner-component. You might also have noticed that InnerProps extends TimeAxisProps. Constraining our generic type parameter it this way ensures that we can only apply this HOC on components that have at least the props dayStart, dayEnd, onZoomIn and onZoomOut that we’d like to provide to it. If that component doesn’t have these four props, why even apply WithTimeAxis, right?</p><h3>Trouble</h3><p>There is, however, a tiny problem… It doesn’t compile!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/833/1*6mEccGy9WNOJ5zU_8a35DA.png\" /></figure><p>But why doesn’t it? TypeScript has trouble figuring out that the combination of OuterProps<InnerProps> and TimeAxisProps is equal to InnerProps. Although this is true for the case with GraphProps, it isn’t true in general.</p><p>To give you an example in which this isn’t true, let’s suppose that we try to apply the HOC to a component CounterExample with the following props:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c5c113258aeee9aebb16e320957a1bf2/href\">https://medium.com/media/c5c113258aeee9aebb16e320957a1bf2/href</a></iframe><p>where I’d like to point your attention to the dayStart: 0.</p><p>I admit, this is a bit farfetched, but it does illustrate the point. We shouldn’t apply WithTimeAxis to CounterExample as the HOC might provide a dayStart that is not equal to zero. In fact, changing the zoom level multiple times ensures that dayStart will eventually be non-zero, even if it was equal to zero initially.</p><p>The TypeScript isn’t complaining about this when we do try to apply WithTimeAxis to CounterExample, as CounterExampleProps nicely extends TimeAxisProps as I required. CounterExampleProps is more specific than TimeAxisProps (because the type 0 is more specific than number) but that is allowed for subtypes. Instead, the compiler has noticed this possibility even before we did, and that is why our HOC doesn’t compile!</p><p>The root of our issues is with the InnerProps extends TimeAxisProps constraint. What we try to express is that all properties of TimeAxisProps are shared with InnerProps without allowing for subtypes. Unfortunately extends is currently the best we can do. In fact, it’s the only type of constraint we can express on our generic type parameters in TypeScript.</p><h3>Hope on the horizon</h3><p>We can solve this problem by pushing the burden of proof up a level. We ask the user for a function convert that is able to convert the combination of OuterProps<InnerProps> and TimeAxisProps (which can be expressed in TypeScript as OuterProps<InnerProps> & TimeAxisProps) to InnerProps. If the user can do that, we can call Inner with the right props:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d33910d05ac4789a904c27f227daebd3/href\">https://medium.com/media/d33910d05ac4789a904c27f227daebd3/href</a></iframe><p>What does this conversion function look like in the example of GraphProps? It’s not very difficult at all! In the example of GraphProps we can see that:</p><ul><li>The parameter type is Omit<GraphProps, keyof TimeAxisProps> & TimeAxisProps, which the compiler knows is just a fancy way to write GraphProps;</li><li>The return type is GraphProps.</li></ul><p>What it boils down to is that we are asked to provide a function that makes this very trivial conversion:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/73915cfc6b5c30035941b28cb50122df/href\">https://medium.com/media/73915cfc6b5c30035941b28cb50122df/href</a></iframe><p>We can even use the identity function if we’d like:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/93c93d1d239d09c7b05059fc51ec102f/href\">https://medium.com/media/93c93d1d239d09c7b05059fc51ec102f/href</a></iframe><p>For CounterExample we are asked to provide a conversion function that takes an object with dayStart: number to dayStart: 0. We could simply provide a conversion function that maps every dayStart (whether it is 1, 2, 99 or something else) to 0 but that would clearly not be in the spirit of WithTimeAxis. If I would instead try to use something identity in this case, TypeScript would complain.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/927/1*g_5XkBVLaWIkvs7W_XHv8g.png\" /></figure><p>which is a rather nice way of hearing about this compilation error I think. (Especially the note at the bottom that says “Type ‘number’ is not assignable to type ‘0’” points you in the right direction immediately.)</p><p>As we’ve concluded earlier, OuterProps<CounterExampleProps> & TimeAxisProps is not equal to CounterExampleProps, and the compiler can tell you that. If you cannot use something like identity or trivial, that means you probably shouldn’t use this HOC.</p><p>This is really the crucial step of this blog, so take some time to digest this. We’ve pushed the burden of proving that OuterProps<InnerProps> & TimeAxisProps to InnerProps from Outer (where that’s hard or even impossible to do) to the consumers of this component (where that is easy or even trivial to do). We can’t prove this in general, but we can do it case-by-case every time we apply WithTimeAxis.</p><h3>Leibnizian equality</h3><p>A famous mathematician called Leibniz described a form of equality in which two things (<em>a</em> and <em>b</em>) can be considered to be equal if every predicate that holds for <em>a</em> also holds for <em>b</em> (and vice versa).</p><p>In TypeScript, we can express this as</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0003891a80c301954c22135f2ae89276/href\">https://medium.com/media/0003891a80c301954c22135f2ae89276/href</a></iframe><p>Two types A and B are equal if every function that maps A to B is also a mapping from B to A. You can see that it’s only possible to construct such a function if A is equal to B. In that case Leibniz<A, B> collapses to type Leibniz<A, A> = (a: A) => A (in other words, it is our identity function).</p><p>Leibniz is a formalization of the technique we used in the previous section with a HOC:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b8e604fad0b336ff9bd6690a6144f3d7/href\">https://medium.com/media/b8e604fad0b336ff9bd6690a6144f3d7/href</a></iframe><p>By requiring a Leibniz<OuterProps<InnerProps> & TimeAxisProps, InnerProps> this function expresses that it can only do its job if OuterProps<InnerProps> & TimeAxisProps and InnerProps are equal.</p><p>Because Leibniz<...> serves as our type constraint, we can even drop the extends from InnerProps extends TimeAxisProps. This is no real loss as that extends wasn’t doing a very good job anyways.</p><h3>Conclusion</h3><p>Sometimes we need something stricter than extends, or we’d like to constrict the type parameter in the other direction (number extends T instead of T extends number). In those cases Leibniz<...> can be your friend. In my experience using a Leibniz<...> improves the readability of your type constraints when those constraints get more complicated (or include three or more different types).</p><h3>Afterthoughts</h3><p>This technique was first used in <a href=\"http://portal.acm.org/citation.cfm?id=583852.581494\">Typing Dynamic Typing (Baars and Swierstra, ICFP 2002)</a> but I haven’t seen it used in TypeScript anywhere yet. I’m really interested to hear how you would tackle the problem addressed in this post without using a Leibniz<...> or if you’ve seen it used in similar (or different!) places. Let me know!</p><p>[1]: Omit will be introduced in TypeScript 3.5. In the meantime, you can define it yourself as type Omit<O, K extends keyof O> = Pick<O, Exclude<keyof O, K>> .</p><p>[2]: We’ve defined OuterProps in terms of InnerProps. Like in mathematics, where you can express <em>y</em> in terms of <em>x</em> (<em>y</em> = 2<em>x</em>) or <em>x</em> in terms of <em>y</em> (<em>x</em> = <em>y</em> / 2), TypeScript allows me to reverse this relationship. We get</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/6b167f9d1d20ec94c10cea7fd2c316c6/href\">https://medium.com/media/6b167f9d1d20ec94c10cea7fd2c316c6/href</a></iframe><p>No need for complicated tricks like Omit<...>. Unfortunately, this doesn’t work. Because we start out with an Inner-component, from which we generate an Outer-component, we should start out with an InnerProps, from which we derive the OuterProps. If we would reverse this relationship by writing</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/40fbe7040d4bd177462b93777724ce0a/href\">https://medium.com/media/40fbe7040d4bd177462b93777724ce0a/href</a></iframe><p>we’d lose the ability for TypeScript to correctly infer the right types:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/930/1*JmOikDAspLJuHPY07W1-Lw.png\" /></figure><p>In our example, the compiler would infer OuterProps to be equal to GraphProps, which includes dayStart, dayEnd, onZoomIn and onZoomOut so when you try to use the resulting component you are still asked to provide those props (even though they will by overwritten by the ones the HOC provides).</p><p>If you don’t mind helping the compiler a hand by providing the type yourself (instead of letting TypeScript infer it) then this is a very nice way of writing HOC’s and you needn’t read the rest of the blog.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2aeff1303749\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/leibniz-equality-in-typescript-2aeff1303749\">Leibniz equality in TypeScript</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},{"id":"https://medium.com/p/6a3f4b167852","title":"Event sourcing with Akka Persistence","author":"Nick ten Veen","latestPublishedAt":"Fri, 07 Jun 2019 12:40:24 GMT","uniqueSlug":"https://medium.com/codestar-blog/event-sourcing-with-akka-persistence-6a3f4b167852?source=rss----ea5cff13e3c9---4","paragraphs":"<h4>Asynchronous pains</h4><p>In one of our projects at the Port of Rotterdam we do a lot of stream processing where we require intermediate state. We are using Event Sourcing with <a href=\"https://doc.akka.io/docs/akka/current/typed/persistence.html\">Akka Persistence</a>. It allows us to create robust stateful streaming applications that can maintain state between application restarts. We were struggling a bit writing our command handlers since we do a bunch of asynchronous operations. Akka Persistence does not allow you to handle command asynchronously which means you need to deal with this yourself. Let us explore the problem in a simplified event sourcing application.</p><h4>Event Sourcing</h4><p>Let us create a simple implementation of an event sourcing system. A simple calculator that can add and subtract values. First we define our state, which is simply an integer value:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5d07332ecc9f80747f4ccc337a8273ac/href\">https://medium.com/media/5d07332ecc9f80747f4ccc337a8273ac/href</a></iframe><p>The state can only be modified by firing events. Let us create two possible operations, adding and subtracting from the state:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/62541bf29f1b3892b120aff8034bd4cd/href\">https://medium.com/media/62541bf29f1b3892b120aff8034bd4cd/href</a></iframe><p>Now that we have a definition for our state and possible events, we can write a handler that will process these events:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f977354dda7e13ecde4eab9931c297fb/href\">https://medium.com/media/f977354dda7e13ecde4eab9931c297fb/href</a></iframe><p>We can test the event handler to verify that the events are processed correctly:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/25740c4cfde538c6c2e06eba4ee7d9be/href\">https://medium.com/media/25740c4cfde538c6c2e06eba4ee7d9be/href</a></iframe><h4>Commands</h4><p>In event sourcing, events are immutable facts that happened. These events should be handled deterministically without any side effect. However, sometimes we need to perform side effects. For example when we need to query a database to check if an operation is allowed. We can use the command abstraction for this purpose. A command is a request to do something. Requests can be accepted or denied, or even transformed. They are also allowed to perform side effects. We can define commands for addition and subtraction:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3a0d54d783a9e5785f1147b8029cae28/href\">https://medium.com/media/3a0d54d783a9e5785f1147b8029cae28/href</a></iframe><p>A command handler can process these commands and decide to fire zero or more events:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1ad75d70e2dab02037a5928bb1d9b459/href\">https://medium.com/media/1ad75d70e2dab02037a5928bb1d9b459/href</a></iframe><p>We can test the command handler to verify it will fire events accordingly:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ab4957892a4c78e046c24a2df851293c/href\">https://medium.com/media/ab4957892a4c78e046c24a2df851293c/href</a></iframe><p>The command handler and event handler can be folded together to calculate the state for a given list of commands:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e2ec3d55ea53da5bc06bc02461c379ec/href\">https://medium.com/media/e2ec3d55ea53da5bc06bc02461c379ec/href</a></iframe><p>This all works fine, but if we want to recover the state during a crash or restart, we also need to store the events that we persist. We need a function that accumulates the events while calculating the state:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0b2e607e74d6a86c575971d4c57df104/href\">https://medium.com/media/0b2e607e74d6a86c575971d4c57df104/href</a></iframe><p>We can keep the accumulated state in memory during processing and at the same time persist the generated events somewhere. On restarts we can replay these events with the eventHandler to restore our state.</p><h4>Akka Persistence</h4><p>This pattern is encoded in Akka Persistence and allows us to have actors with state that can be recovered after crashes and restarts. The command handler is a little bit different. Instead of returning a list of events that happened, you can specify an Effect. These effects are simply an encoding of possible actions a persistent actor can do after receiving a command:</p><ul><li>Persist an event</li><li>Stop the actor</li><li>Stash the command</li><li>Do nothing</li></ul><p>These effects can be composed together to (for example) persist multiple events. In our example we can write a simple command handler:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f6718504ef695cb7e2ce9e4380fba243/href\">https://medium.com/media/f6718504ef695cb7e2ce9e4380fba243/href</a></iframe><h4>Asynchronous command handling</h4><p>One issue about the commandHandler is that it is synchronous. <a href=\"https://github.com/akka/akka/issues/25650\">There are currently no plans for aynchronous command handlers in akka</a> persistence.<br>If you want to do some asynchronous processing before deciding to persist an event, you need to introduce extra commands. For example, lets say we want to have a check if a specific addition or subtraction is allowed before we emit an event. We really need to do this asynchronously for some reason, so lets create a definition of our permission check:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c1b62ffb83ccde773ba063938dbb57a8/href\">https://medium.com/media/c1b62ffb83ccde773ba063938dbb57a8/href</a></iframe><p>To be able to add this to our command handler, we need an extra command that is fired after validation. We also group our previous commands into a subtype so it can be a parameter of our new command:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/92c2de50dc026f7ea003117690b031a7/href\">https://medium.com/media/92c2de50dc026f7ea003117690b031a7/href</a></iframe><p>With this definition we can rewrite our event handler to take this check into account:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d76cbff50bb56201bf8a9976137b8d60/href\">https://medium.com/media/d76cbff50bb56201bf8a9976137b8d60/href</a></iframe><p>This does work, however we lost a property that might be important to us. <br>The order in which the algebraic commands are processed is lost due to the asynchronous boundary. Say our check is really slow for some specific elements. Other elements that arrived later might have been processed already and arrive out of order:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/eb9dc629dd33e621c308219abece7984/href\">https://medium.com/media/eb9dc629dd33e621c308219abece7984/href</a></iframe><p>If we would process the following commands in order, the outcome might have a different order:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d8fcebd84408bd53f03f8673ca48c98c/href\">https://medium.com/media/d8fcebd84408bd53f03f8673ca48c98c/href</a></iframe><p>You could fix this by storing inflight messages in some (non-persistent) state, <br>or by using the ask pattern and waiting for replies before sending each command. Currently (as far as I am aware) you are unable to store volatile state in a persistent actor. This means that if you want to store messages that are in flight, you need to use persistence for this. We can extend the state to store this along with a persistent event to signal inflight messages:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/137c495e4617b589ec586093539a0d8a/href\">https://medium.com/media/137c495e4617b589ec586093539a0d8a/href</a></iframe><p>Previously we only fired a command if an operation is allowed, but since we also need to unstash if an operation is not allowed, we always need to fire a command for a result. So we need to modify our OperationAllowed command:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/77909a2f33d897027ea29e5f37aa5589/href\">https://medium.com/media/77909a2f33d897027ea29e5f37aa5589/href</a></iframe><p>Our event handler is now responsible for handling this extra event and cleaning up after a command has been successfully processed:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7939bcca43e31638fea8c1f3601a5b7c/href\">https://medium.com/media/7939bcca43e31638fea8c1f3601a5b7c/href</a></iframe><p>Finally we need to rewrite our command handler to stash incoming commands as long as there is still a message in flight.<br>After a command is successfully processed, we need to unstash to continue processing potentially stashed commands:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0a0f3a59d6fd65959ce18f46fe0d0e43/href\">https://medium.com/media/0a0f3a59d6fd65959ce18f46fe0d0e43/href</a></iframe><p>After all this there are still a few concerns with this implementation. <br>What if checkPermission fails? We would need to extend the example to deal with failing futures as well. Moreover, we persist the state of inflight messages so it survives restarts. However after a restart this message is not in flight and we might wait for eternity for it to resolve. This example illustrates that you can handle commands asynchronously, but in order to ensure messages are processed in the correct order, we needed to add error-prone synchronisation code.</p><h4>Conclusion</h4><p>You can do asynchronous command handling with Akka Persistence. It does however require you to write some error-prone boilerplate code. Can we do better? Are persistent actors the correct approach for this problem? Maybe we can express the problem in a different paradigm where we still have the nice property of state recovery, while also allowing us to handle commands asynchronously. Maybe we could use stream processing to have a cleaner solution to our problem. But that is for another blog post.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6a3f4b167852\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/event-sourcing-with-akka-persistence-6a3f4b167852\">Event sourcing with Akka Persistence</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},{"id":"https://medium.com/p/9790212aa211","title":"How we automated our Angular updates","author":"Bjorn ‘Bjeaurn’","latestPublishedAt":"Tue, 21 May 2019 13:37:13 GMT","uniqueSlug":"https://medium.com/codestar-blog/how-we-automated-our-angular-updates-9790212aa211?source=rss----ea5cff13e3c9---4","paragraphs":""},{"id":"https://medium.com/p/f81434f6f8d7","title":"Apollo Client in Practice","author":"mdworld","latestPublishedAt":"Thu, 02 May 2019 18:24:29 GMT","uniqueSlug":"https://medium.com/codestar-blog/apollo-client-in-practice-f81434f6f8d7?source=rss----ea5cff13e3c9---4","paragraphs":"<p>Some time ago I joined a team that is working on a search application. The application takes search terms and displays the results in a table with potentially dozens of columns and hundreds of rows, even before pagination. It is implemented in React and uses <a href=\"https://www.apollographql.com/\">Apollo</a> for GraphQL calls. I was surprised to find it noticeably slow when a lot of search results were retrieved. React is well-known for leveraging virtual DOM to optimize performance and GraphQL should even be able to add caching to further optimize performance on the side of network requests.</p><p>Looking into the performance tab of Chrome dev tools lead me to believe the performance problems were caused by computations in the bottom components (e.g. formatting in cells). Because there are so many and they are re-rendered quite often, this approach is quite intensive on resources.</p><p>Besides that, the application had obvious state synchronization problems. When moving between views it was not maintaining the same state of selected rows. Even though Redux was used to store application state and communicate it between components, it was not used consistently. There were still plenty of React class components that stored some parts of the state locally.</p><p>To summarize, there were two issues that needed to be solved:</p><ol><li>Poor performance due to excessive re-rendering</li><li>Loss of application state when navigating views due to decentralized state stores</li></ol><p>Since both issues were caused by (a lack of) architecture, we redesigned the structure of the application. The original implementation used:</p><ul><li><a href=\"https://www.apollographql.com\">Apollo Client</a> as a GraphQL client</li><li><a href=\"https://github.com/axios/axios\">Axios</a> as an HTTP client for REST endpoints</li><li><a href=\"https://redux.js.org\">Redux</a> and <a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\">React local state</a> to manage the state between components</li></ul><p>It used Apollo, but by <a href=\"https://www.apollographql.com/docs/react/essentials/queries#manual-query\">manually firing</a> client.query() and after processing the response, it stored the result in the Redux store.</p><h3>Fixing application state with Apollo Local State</h3><p>When restructuring the application, Apollo Client was updated to 2.5. This version has a built-in <a href=\"https://www.apollographql.com/docs/react/essentials/local-state\">local state manager</a> (formerly <em>apollo-link-state</em>) and it supports REST calls with the <a href=\"https://www.apollographql.com/docs/link/links/rest\">apollo-link-rest</a> plugin. The <a href=\"https://github.com/apollographql/apollo-client/tree/master/packages/apollo-boost\">apollo-boost</a> package contains the client and several useful plugins. Adopting these means that both Redux and Axios can be removed and Apollo will be used as a single source of truth. If there is a single store for the data, there is no need for synchronization and with that one of the issues is solved.</p><p>The way we used Apollo Client was also updated, to create a better separation of UI and data. Instead of using client.query() directly in the component lifecycle methods, components are split into a presentational component and enhanced with the <a href=\"https://www.apollographql.com/docs/react/api/react-apollo#graphql\">graphql()</a> HOC to add data from remote (i.e. GraphQL back-end) or local fields. Both utilize the Apollo cache, which fulfills multiple functions, one of them an application local state store.</p><p>Example of wrapping a component in a Query HOC:</p><pre>const Books = ({ data: { books } }) => (<br>  <ul><br>    {books.map(book => <li>{book.title}</li>}<br>  </ul>);</pre><pre>export graphql({ query: gql`<br>  query($author: String!) {<br>    books(author: $author) {<br>     title<br>    }<br>  }`, <br>  variables: { author: \"Mickiewicz\" })(Books);</pre><p>Apollo reactively updates when using Query as a container, basically like the connect HOC in Redux. When the variables prop on the Query component is updated, it will automatically re-query. It uses the cache if possible and falls back to a network call if needed, although this behavior can be configured.</p><h3>Improving performance with Local Field Resolvers</h3><p>Having a single source of truth fixes the state synchronization problem. It also paves the way for improving the performance. In general, when a lot of data enters the application, it is a good idea to format it once and cascade the formatted data down to the components and it’s descendants with as little transformations to the data itself. This reduces the amount of computations in the lower components, which solves our other issue.</p><p>When using Redux, a common way to transform data in the store is using <a href=\"https://github.com/reduxjs/reselect\">Reselect</a>, which computes derived data from the Redux store with selectors. For Apollo this is done by:</p><ul><li>wrapping the table in a Query that queries a local prop rows @client, using the <a href=\"https://www.apollographql.com/docs/react/essentials/local-state\">@client</a> directive</li><li>making client side resolvers for rows that queries GraphQL endpoint</li><li>mapping the data in a resolver from a raw format to a format ready for the table components, e.g.:</li></ul><p>from a data object</p><pre>{ <br>  author: \"Mickiewicz\", <br>  publications: [ <br>    { <br>      title: \"Pan Tadeusz\",<br>      date: -4291747200 <br>    } <br>  ] <br>}</pre><p>to an array rows of cells</p><pre>[<br>  [ \"Mickiewicz\", \"Pan Tadeusz\", \"January 1834\" ]<br>]</pre><h3>Next steps</h3><p>Apollo is excellent for merging data from multiple sources (in this case GraphQL, REST, local state and cache) and functions as a “single source of truth” which should solve the state synchronization problems. The local fields that Apollo uses in its local state manager can derive data, moving expensive operations from component render functions to resolvers in its application level cache. Although the issues mentioned in the introduction are now dealt with, we did encounter plenty of other issues I may dive into later. However, these are some things that you might want to take into account when working with Apollo Client:</p><p>Outside of restructuring the application, we improved performance with <a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a> which speeds up rendering large tables. Apollo also offers GraphQL pagination. We did not use that, as we have to do our pagination on the client side to keep the sorting feature of react-virtualized in tact.</p><p>Apollo Client offers support for TypeScript, it is even possible to generate queries and typed React components from GraphQL schemas with <a href=\"https://graphql-code-generator.com/\">@graphql-codegen/cli</a>.</p><p>Also definitely use the <a href=\"https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/\">JS GraphQL IntelliJ Plugin</a> because it will not only auto complete queries, but it will help you think about (client side) schema’s.</p><p>When the Query component mounts, it creates an observable that subscribes to the query in the query prop. This encourages reactive behavior like RxJS (which can also be used as a <a href=\"https://github.com/mdvanes/realtime-planner\">state store</a>). However, it seems that Apollo offers much less fine-grained control over the observables than what RxJS provides. And considering observables, Apollo Client effortlessly <a href=\"https://www.apollographql.com/docs/link/links/ws\">scales to web sockets</a>!</p><p>Are you looking for inspiration on how Apollo client can be applied? I can recommend <a href=\"https://www.youtube.com/watch?v=g6Mhm9W76jY\">this talk by Uri Goldshtein</a> and this <a href=\"https://www.youtube.com/watch?v=2RvRcnD8wHY\">introduction to Apollo state management by Sara Vieira</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f81434f6f8d7\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/apollo-client-in-practice-f81434f6f8d7\">Apollo Client in Practice</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},{"id":"https://medium.com/p/b561e8cfbcfa","title":"Sharing is Caring! Domain objects in BOTH Scala and R with GraalVM Polyglot bindings.","author":"Nathan Perdijk","latestPublishedAt":"Wed, 01 May 2019 07:53:54 GMT","uniqueSlug":"https://medium.com/codestar-blog/sharing-is-caring-domain-objects-in-both-scala-and-r-with-graalvm-polyglot-bindings-b561e8cfbcfa?source=rss----ea5cff13e3c9---4","paragraphs":"<p><strong>In any domain that goes beyond a sample project, it becomes almost inevitable that you want to use objects that accurately represent that domain. GraalVM does an adequate job of converting datastructures from R to JVM languages and back by using sensible defaults, but what do you do when the sensible defaults are not sufficient? Given that GraalVM can perform translation between its multitude of supported languages, is it possible to define a “Domain” that can be accessed by all?</strong></p><p><strong>This is, of course, a rhetorical question and the answer is “Yes”.</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*LPCG2xlLiUdqcYJulzxvmw.png\" /></figure><p>In this article I’ll demonstrate how to share domain objects between JVM languages and guest languages on the GraalVM platform. I’m using Scala domain objects (because Scala is awesome), but you could do the same with, for instance, Java or Kotlin.</p><p>(If you’re new to GraalVM Polyglot abilities, consider also reading my previous article on the subject: <a href=\"https://medium.com/codestar-blog/in-search-of-the-holy-graalvm-putting-the-r-in-scala-or-java-or-b057494f77\">using GraalVM to execute R files from Scala</a>.)</p><h3>The Problem</h3><p>To demonstrate the problem we are trying to solve, we first need a pretend domain. Let’s do something with Weather Forecasts, because people always talk about the weather!</p><p>Creating weather forecasts is the kind of terribly complicated modelling business that could be built in R, but luckily we don’t actually <em>need </em>a<em> </em>working model for this article. So let’s just pretend we already have this awesome R functionality that creates weather forecasts, cleanly abstracted away in a separate file called fun_MagicHappensHere.R:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e5c3b681f21a734cde53718097b48260/href\">https://medium.com/media/e5c3b681f21a734cde53718097b48260/href</a></iframe><p>When brought into scope with R’ssource the above file will yield a magicHappensHere function that can be called and returns a data.frame with some weather forecast information. We can then return the result to Scala by simply making it the return of our R function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2c7e7eec84737fdd738af52569b5b619/href\">https://medium.com/media/2c7e7eec84737fdd738af52569b5b619/href</a></iframe><p>Wow, that doesn’t look too bad! This won’t get many complaints from the Data Scientist, I reckon.</p><blockquote>So, what’s wrong with this? What’s the problem?</blockquote><p>I’m glad you asked, <a href=\"https://www.dictionary.com/browse/interlocutor\">interlocutor</a>! Let’s take a look on the Scala/JVM side of this equation, to see what the Data Engineer has to deal with:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ec12de6f2b6c4cac4c2a8bdd2f083906/href\">https://medium.com/media/ec12de6f2b6c4cac4c2a8bdd2f083906/href</a></iframe><p>Whoa… creating the Graal Context and Source is trivial, but look at the nasty type signature on that call to R! Let’s pick it apart for a bit:</p><ul><li>A Map that contains Lists of each data.frame row keyed by its name… That makes sense, well done Graal! It’s just too bad it’s Stringly typed, rather than actual methods on an actual class, so any typo will mess us up at runtime.</li><li>Unknown content type of the Lists?… That’s unfortunate, we know that some rows should only contain String, while others contain Int but this information is lost in conversion… We have to do a bunch of casting!</li><li>The returned Collections are Java? That’s just sad! The polyglot representation of collections doesn’t transfer to Scala, but Scala Map and List are much more powerful than their Java equivalent, so we’ll have to convert the Java equivalents!</li><li>Every element of each List doesn’t actually belong to the rest of the List, but instead should be combined with each corresponding position in every other List to actually make a WeatherReport… (The first entry of “humidities”, should be paired with the first entry of “temperatures” etc.)</li></ul><p>Let’s see what this means when we try to use the output of this function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c0596dc510b7e5f8a31583fe7a18ee86/href\">https://medium.com/media/c0596dc510b7e5f8a31583fe7a18ee86/href</a></iframe><p>I don’t know about you, but I’d feel quite uncomfortable at the thought of maintaining the code above. It’s verbose, error prone, brittle, annoying and it fails at the wrong spot if any mistakes are introduced (namely at the place of conversion, rather than the place of programming error). I wish the R function would just return a Set of WeatherForecast!</p><p>Whoops, hold on… Wait a minute…</p><p>Why don’t we just <strong><em>make it do that?</em></strong></p><h3><strong>The Solution: Bindings</strong></h3><p>GraalVM comes with an option that makes it possible to explicitly share instances of code across the language divide. It makes it possible to add symbols to bindings that are accessible to other languages. The Graal Context has two functions that can be used to do this in a very similar way:</p><ul><li><a href=\"https://www.graalvm.org/sdk/javadoc/org/graalvm/polyglot/Context.html#getPolyglotBindings--\">getPolyglotBindings()</a></li><li><a href=\"https://www.graalvm.org/sdk/javadoc/org/graalvm/polyglot/Context.html#getBindings-java.lang.String-\">getBindings(“nameOfLanguage\")</a></li></ul><p>In this article I will be using getBindings, because it doesn’t require an explicit import on the side of the using language and it allows you to limit which languages you are exposing each binding to. Using getPolyglotBindings() is almost identical from a coding perspective though, so pick the one you like best.</p><h4>Using Domain objects on both sides of the language divide</h4><p>This is what our Domain object looks like:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/49e56d665f505d7658635c3908f18293/href\">https://medium.com/media/49e56d665f505d7658635c3908f18293/href</a></iframe><p>Domain is basically a factory that can be used to spawn new instances of all the domain classes that we want to share. The classDomain itself is immutable! (As it happens, the spawned instances are too.)</p><blockquote><strong>WARNING</strong>: You probably don’t want to put a mutable object into bindings. If you do, this object can be mutated <strong>from any language that can reach it</strong>. Just as you don’t want multiple threads to tangle with the same mutable object, you don’t want multiple languages to access the same mutable state! (Really! Imagine having to debug race conditions across language boundaries...)</blockquote><p>Any instance of the Domain class provides methods to spawn new instances of the following domain case classes:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7e5132cb958ccf0a06cd9e1c9f11781c/href\">https://medium.com/media/7e5132cb958ccf0a06cd9e1c9f11781c/href</a></iframe><p>Let’s put an instance of our Domain class into the bindings for R, so it can be accessed from the R guest language context:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5393f68ce45968ecfb3227cf89c4f771/href\">https://medium.com/media/5393f68ce45968ecfb3227cf89c4f771/href</a></iframe><p>Easy peasy. From R, the new object will simply be known as Domain and its methods will be accessible like this: Domain$methodName(arguments)</p><p>We turn a new R file, that uses this binding, into our newest Source:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/92c7888cae1e6b4a450d20944457369d/href\">https://medium.com/media/92c7888cae1e6b4a450d20944457369d/href</a></iframe><p>And then we define the function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/fb46db7c7465f5e596e35b2a8d0bc399/href\">https://medium.com/media/fb46db7c7465f5e596e35b2a8d0bc399/href</a></iframe><p>Now that this is our return type, all we need to do to work with the returned WeatherForecasts is this:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7f28f8cfe8bd2c744ec6326a1fb9417e/href\">https://medium.com/media/7f28f8cfe8bd2c744ec6326a1fb9417e/href</a></iframe><p>That is one very happy Data Engineer! (Don’t forget to compare with the incomplete parsing above.)</p><p>Now, let’s see the impact on the DataScientist side:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/15fe0238001746bf073b808472cb29cc/href\">https://medium.com/media/15fe0238001746bf073b808472cb29cc/href</a></iframe><p>As we can see, the code has become more verbose (although it’s actually quite efficient still, if you take out all the clarifying comments I put in), but not quite as bad as in the previous solution:</p><p>In this R file, we now need to convert the data.frame to proper WeatherForecast instances to be added to the WeatherForecastList we also got from Domain. But rather than doing a Parse & Pray, as we had to do with the no-bindings solution, we can now use proper constructors that will fail with intelligible errors if we make a mistake. (Sadly still only at runtime, because this is still R.) Cleanly taking values out of the data.frame is also better supported by its native language and we could add more convenience methods to more succinctly create the domain classes if we wanted to. If we have direct control over the function that creates the weather forecasts, we can even skip the data.frame altogether and exclusively use WeatherForecastList, which eliminates the extra code seen above.</p><p>The biggest advantage, though, is that we now have a very clearly defined interface. Any user can open up the Domain.scala file to see what methods are available, what parameters they take and what things they return.</p><h3><strong>Conclusion</strong></h3><p>Using Bindings to provide a clean shared domain between guest languages (like R or Python) and JVM languages (like Scala, Java or Kotlin) in GraalVM is pretty easy and gets rid of a lot of ugly and fault-sensitive parsing. It also provides a crucial stepping stone for further integration of functionalities across language boundaries.</p><p><strong>PS</strong>: I could have added a factory for each separate domain class to the bindings, instead of giving them a shared factory. This can make the code on the R side a little shorter, but creates a less clean interface (at least to my taste).</p><h3><strong>Sourcecode</strong></h3><p>I have reused the example project from my previous article on <a href=\"https://medium.com/codestar-blog/in-search-of-the-holy-graalvm-putting-the-r-in-scala-or-java-or-b057494f77\">using GraalVM to execute R files from Scala</a>) and branched it for this article. The source code can be found <a href=\"https://github.com/NRBPerdijk/example-graalvm-r-scala/tree/usingBindingsToShareDomain\">here</a>. The snippets above are taken from the linked project and altered to better fit the sizing of the article.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b561e8cfbcfa\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/sharing-is-caring-domain-objects-in-both-scala-and-r-with-graalvm-polyglot-bindings-b561e8cfbcfa\">Sharing is Caring! Domain objects in BOTH Scala and R with GraalVM Polyglot bindings.</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},{"id":"https://medium.com/p/cd7456268dc5","title":"Using generative art to create a pulsating SVG star","author":"Hamza Haiken","latestPublishedAt":"Fri, 12 Apr 2019 09:39:17 GMT","uniqueSlug":"https://medium.com/codestar-blog/using-generative-art-to-create-a-pulsating-svg-star-cd7456268dc5?source=rss----ea5cff13e3c9---4","paragraphs":"<h4>Part 1 — Intro</h4><p>I recently created a new design for our recruitment campaign at Codestar. It represents a burning star, with <a href=\"https://www.ucl.ac.uk/news/sites/news/files/corona-web.jpg\">corona-like features</a>, represented in an abstract way, aiming to make it feel like a pulsating stream of data (The original artist for the star is <a href=\"https://www.shutterstock.com/g/GarryKillian\">Garry Killian</a>).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lY5WPHYbCz_PDY-PaxTa0A.png\" /><figcaption>We’re very big on only hiring Latin speakers</figcaption></figure><p>The rest of the team enjoyed it, and we nicknamed this design <em>“the code star”</em>. It was then suggested that we could try and recreate this as an animation for our website, or to simply just to generate as many different static stars as we want: a teammate’s name could be used as a random seed, and they would be given their own special code star.</p><p>In this series of blog posts, I will endeavor to explain my process in taking on this challenge, going through various subjects, in particular <em>generative art</em> and <em>SVG animation.</em></p><p>Our goal in this series will be to re-create the above visual in SVG, and animate it to make it slowly pulsate, like the sun’s corona.</p><h3>What is generative art?</h3><p>The term <a href=\"https://en.wikipedia.org/wiki/Generative_art\">“generative art”</a> (or also “procedural art”) refers the making of art algorithmically, typically relying on fractals and randomness.</p><p>Famous examples of this include: <a href=\"https://i.imgur.com/gV0cxPU.jpg\">that one album cover that everybody wears on a t-shirt</a>, <a href=\"https://i.imgur.com/smNksSJ.jpg\">Minecraft’s infinitely expanding worlds</a>, <a href=\"https://www.rockpapershotgun.com/images/16/aug/nmsg8s.jpg\">No Man’s Sky’s universe and planets</a>, and many more.</p><p>For further learning about getting started in generative art (after reading this of course!), I recommend as starting points <a href=\"https://generativeartistry.com\">Generative Artistry</a> and <a href=\"https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw\">The Coding Train</a> YouTube channel, which often takes on generative art challenges.</p><h3>Noise</h3><p>One commonly used tool in the field of generative art is <em>noise</em> — in particular, <a href=\"https://en.wikipedia.org/wiki/Perlin_noise\">Perlin</a>, or <a href=\"https://en.wikipedia.org/wiki/Simplex_noise\">Simplex noise</a> (which is more suited for animations since it has a lower overhead). It is used for a variety of results: terrain, smoke, clouds, textures.</p><p>This kind of noise is obtained by overlaying noise at different frequencies on top of each other, forming a cloud-like texture that expands infinitely in any direction. The nice thing about this method of constructing noise is that it can be expanded to support any number of required dimensions (in our case, a 3D space).</p><p>In a nutshell, Perlin noise is constructed by averaging noise rendered at several scales (bilinear interpolation is used to smooth out the lower frequencies):</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/801/1*upB28P_sCBlqPhXgWO15Zw.png\" /><figcaption>Image source: <a href=\"https://medium.com/100-days-of-algorithms/day-88-perlin-noise-96d23158a44c\">https://medium.com/100-days-of-algorithms/day-88-perlin-noise-96d23158a44c</a></figcaption></figure><p>When averaging all of these (using some kind of weighted distribution), the following natural, cloudy texture is obtained:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/511/1*WHpL6IJd_gUROUmBUlXWnQ.png\" /><figcaption>Could this image just be the “cloud” filter in Photoshop? Who knows</figcaption></figure><p>Used creatively, this noise can be used to create impressive results, like this <a href=\"https://skybase.wordpress.com/2012/01/26/how-to-creating-super-simple-procedural-wood-textures-in-filter-forge/\">wood texture</a> for example (and again, given the nature of Perlin noise, this texture can expand seamlessly in any direction).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zlgGPvL70VCc9cOf5VFBsA.jpeg\" /><figcaption>Sitting atop a mathematically generated hill is a big dream of mine</figcaption></figure><p><a href=\"https://i.redd.it/rq3ptj8i75b21.jpg\">And here</a> is an example from the game “No Man’s Sky”. The mountains in such a landscape are created using low-frequency noise (big features), the smaller hills on top of that come from the middle range of noise frequencies, and if you zoom in even closer the small dirt bumps are added on top of the hills by adding in the values of a higher frequency (this is like a fractal). Additionally, the noise formula can also be (and was) manipulated in such a way as to seamlessly wrap around a sphere.</p><h3>Using noise</h3><p>One of the big advantages of Perlin noise: by traveling along its plane, the intensity values increase and decrease <strong>continuously</strong>. This is not only very useful for terrain generation for creating hills and valleys, but also for <em>animation</em>, providing offsets that will smoothly increase or decrease randomly in a natural way.</p><p>We will use <a href=\"https://github.com/jwagner/simplex-noise.js\">simplex-noise.js</a> for generating our noise. This is not Perlin but Simplex noise; it looks less detailed, and is faster to compute. The library provides a simple API: just instantiate a noise object with a <a href=\"https://en.wikipedia.org/wiki/Random_seed\">random seed</a>, which you can then use for getting noise values in 2D, 3D or 4D:</p><pre>let simplex = new SimplexNoise(\"tutorial seed\");<br>let value = simplex.noise2D(0.42, 13.37);</pre><p>Precision can be as small as needed, effectively zooming in on the noise, and the whole 2D plane that can be represented with JavaScript numbers is available to us.</p><p>Here is a simple demo on how to use Simplex noise. Feel free to play around with the sliders, particularly with the z-axis (slowly).</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2FTenchi2xh%2Fembed%2Fpreview%2FZVdLOo%3Fheight%3D600%26slug-hash%3DZVdLOo%26default-tabs%3Djs%2Cresult%26host%3Dhttps%3A%2F%2Fcodepen.io&url=https%3A%2F%2Fcodepen.io%2FTenchi2xh%2Fpen%2FZVdLOo&image=https%3A%2F%2Fscreenshot.codepen.io%2F273979.ZVdLOo.small.4ab4ffde-92ca-4056-abc1-9a1f71fb3192.png&key=a19fcc184b9711e1b4764040d3dc5c07&type=text%2Fhtml&schema=codepen\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7d32cde0d50fcb456ebd1d75717334b2/href\">https://medium.com/media/7d32cde0d50fcb456ebd1d75717334b2/href</a></iframe><p>Moving along the X- and Y-axes feels natural to us humans — it just looks like standard translation — but it shows us that the noise is indeed continuous.</p><p>Moving along the Z-axis, however, gives a totally different feeling, exposing the vertical continuity of the noise by showing us slices of what seems to be an animation.</p><p>The color values at a given pixel coordinates change continuously and smoothly while navigating along the Z direction.</p><p>This is a big clue; by using the Z-axis to represent time, we can now animate things.</p><p>But before we can animate, we will first need a drawing!</p><h3>Coming up in this series</h3><p>Stick around on the Codestar blog to catch the next parts in this series:</p><ul><li>Drawing the basis for the SVG star: basic <a href=\"http://snapsvg.io/\">Snap.svg</a> tutorial</li><li>Mapping star element coordinates using the Simplex noise as a displacement map: some trigonometry and calculus</li><li>Animation: bringing everything together, and using <a href=\"https://cocopon.github.io/tweakpane\">Tweakpane</a> for playing around with the settings</li><li>Making a tool for outputting static SVG images using a string seed for generating a random star</li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cd7456268dc5\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/using-generative-art-to-create-a-pulsating-svg-star-cd7456268dc5\">Using generative art to create a pulsating SVG star</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"}],"pastMeetups":[{"created":1658125967000,"duration":7200000,"id":"287258312","name":"DENGUG","rsvp_limit":12,"date_in_series_pattern":false,"status":"past","time":1663257600000,"local_date":"2022-09-15","local_time":"18:00","updated":1663268499000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":3,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/287258312/","description":"<p>Dutch Enterprise Angular User Group meeting, discussing experiences and issues when working with the Angular Ecosystem in enterprise environments.</p> <p>Representatives with enterprise experience from several companies are invited.</p> <p>Core topics include:</p> <p>* Nx monorepos<br/>* NgRx state management, SHARI and DUGSA principles<br/>* Testing</p> <p>Places are limited, that's why contact information is required. You will receive an Outlook invitation for the definitive session.</p> <p>Dinner is provided.</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":505683053,"highres_link":"https://secure.meetupstatic.com/photos/event/b/e/d/highres_505683053.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/b/e/d/600_505683053.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/b/e/d/thumb_505683053.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1661497459000,"duration":10800000,"id":"288072328","name":"Paul van der Slot; Writing Cleaner Code with DDD and Functional Programming","date_in_series_pattern":false,"status":"past","time":1662652800000,"local_date":"2022-09-08","local_time":"18:00","updated":1662665467000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":21,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/288072328/","description":"<p>Paul is a freelance software engineer with a passion for Clean Code, Collaborative Modelling and Domain-Driven Design. During assignments Paul is always busy with sharing his knowledge, for instance through coding dojo's and talks. He searches for new knowledge in other people, books, experiences, videos and practicing. When he learnes something new he is exited to pass it on to everybody who wants to know.</p> <p>I always thought that my code was fine. I took my time for naming things, wrote small classes/methods and tried to use other Clean Code practices. But after a job interview with a technical coach, I was pointed towards Domain-Driven Design (DDD) and some other design topics. I could learn a lot from it, said the technical coach. And I did! Since then, I started noticing how much parts of DDD could help with my day to day job. I will take you with me on my learning journey of Domain-Driven Design, and how it helped me improve my code. We will touch upon themes like Ubiquitous Language, Supple Design, Bounded Contexts and more. You can expect a talk with a lot of code examples and practical advise that you can use the next day.</p> <p>Program;<br/>18:00 Dinner<br/>18:45 Start talk Paul van der Slot<br/>19:45 Drinks</p> ","visibility":"public","member_pay_fee":false},{"created":1652082935000,"duration":21600000,"id":"285794683","name":"Code & Comedy register @https://www.codeandcomedy.com/","date_in_series_pattern":false,"status":"past","time":1655391600000,"local_date":"2022-06-16","local_time":"17:00","updated":1655415168000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":1,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/285794683/","description":"<p>[Code &amp; Comedy - 2022](<a href=\"https://www.codeandcomedy.com/event-details/code-comedy-2022\" class=\"linkified\">https://www.codeandcomedy.com/event-details/code-comedy-2022</a>)<br/>Code &amp; Comedy the place to be for interesting talks about software craftmanship combined with comedy for some great laughs. Break out sessions are held in smaller groups. Please choose your preferred break out sessions. There is limited space in every breakout session. First come first serve.<br/>When; 16 jun. 17:00 – 23:00 CEST</p> <p>Take a quick look at our website for the complete program!</p> <p>Register @ <a href=\"https://www.codeandcomedy.com/\" class=\"linkified\">https://www.codeandcomedy.com/</a></p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":503987851,"highres_link":"https://secure.meetupstatic.com/photos/event/b/a/e/b/highres_503987851.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/b/a/e/b/600_503987851.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/b/a/e/b/thumb_503987851.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1646316578000,"duration":10800000,"id":"284379095","name":"PUBG game event","date_in_series_pattern":false,"status":"past","time":1649350800000,"local_date":"2022-04-07","local_time":"19:00","updated":1649364652000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":2,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/284379095/","description":"<p>PUBG Battle Royale Event<br/>On April the 7th, 2022, you can prove your worth against many other teams in the online PUBG Esports Tournament organised by Ordina! Play for glory and win great prizes!Of course, as colleagues and friends amongst each other it's all fun and games. Sign up now with your team to receive a \"Borrelbox\" with a drink and snacks. Don't have a (full) team? No worries! Sign up with as many as you can/know and the organisation will try to balance the teams as fairly as possible.</p> <p>```<br/><a href=\"https://ap.lc/CmiAY\" class=\"linkified\">https://ap.lc/CmiAY</a><br/>```</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":502418441,"highres_link":"https://secure.meetupstatic.com/photos/event/9/6/2/9/highres_502418441.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/9/6/2/9/600_502418441.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/9/6/2/9/thumb_502418441.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1645702701000,"duration":9000000,"id":"284220509","name":"Let's talk about Kotlin","date_in_series_pattern":false,"status":"past","time":1647966600000,"local_date":"2022-03-22","local_time":"17:30","updated":1647977357000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":9,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/284220509/","description":"<p>Program;<br/>17:30 door is open<br/>18:00 food &amp; drinks<br/>18:30 Talk Julien Lengrand<br/>19:00 break<br/>19:15 Talk Jerre van Veluw<br/>20:00 drinks</p> <p>Talk Julian LeGrand;<br/>PicoCLI is a small library that can be used to create JVM based command line interface applications. Within 30 minutes, we'll look at how to setup a project, create a small application and package it for others to use.<br/>picoCLI is a small library that can be used to create JVM based command line interface applications.<br/>Within 30 minutes, we'll look at how to setup a project, create a small application and package it for others to use.<br/>picoCLI is nice for several reasons : CLIs are a great way to automate some commands we run every day. And because it supports Java and Kotlin, we can keep using our main language of choice rather than having to dive into bash or node. Finally, pico applications can be turned into native images using GraalVM, which allows for a nice end user experience.<br/>By the end of this talk, you'll have a basic knowledge of what picoCLI can do, how to set it up and hopefully ideas of use cases to run it with!<br/>This is a byte size presentation so it'll have to go fast!</p> <p>* I'll introduce the project in 5 minutes<br/>* Then jump into a starter project and the basic features of the library around. We will compile and test it live. - 20 minutes</p> <p>Finally, we will look into some of the advanced features, and check at packaging options for end users - 5 minutes.</p> <p>Talk Jerre van Veluw</p> <p>Killer Interface Patterns<br/>If programming to an interface makes sense between objects in code, it should also make sense between (web)services in an architecture. Moreover, defining a common language between services about the data that flows over the interface can improve communication between people within teams as wel as between teams. In this talk I wil show 3 patterns that leverages the Kotlin and TypeScript compilers to define and be informed about changes to these interfaces.</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":502252382,"highres_link":"https://secure.meetupstatic.com/photos/event/c/c/9/e/highres_502252382.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/c/c/9/e/600_502252382.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/c/c/9/e/thumb_502252382.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1645620027000,"duration":2700000,"id":"284197727","name":"Manfred Steyer Angular's Future Without NgModules","date_in_series_pattern":false,"status":"past","time":1647540000000,"local_date":"2022-03-17","local_time":"19:00","updated":1647544994000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":26,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/284197727/","description":"<p>**Angular's Future Without NgModules: Architectures with Standalone Components**</p> <p>Thanks to Standalone Components, Angular applications won't need NgModules in the future. That makes them more straightforward and lightweight. While the principles behind this new feature are quickly understood, the really interesting question is: How can applications be structured without NgModules?</p> <p>You will get an answer to exactly this question here. After showing the basics and mental model of Standalone Component (Pipes and Directives), you see several approaches for structuring your application and for grouping related building blocks. We also go into edge cases for lazy loading and the use of existing libraries based on NgModules. We discuss the interaction with tree-shakable providers and how you can convert existing solutions step by step to Standalone Components.</p> <p>Manfred Steyer, Google Developer Expert for Angular</p> <p>Manfred Steyer (GDE) is an architect, trainer and consultant for software development with focus on web-based enterprise solutions and architectures with Angular.</p> <p>Before that, he worked for around ten years as a project and team leader in the field of software development and then, in parallel to his work as a trainer and consultant, for around eight years as a university professor for software engineering.</p> <p>Manfred studied part-time IT (Diploma) in Graz (Austria) and also part-time Computer Science (Master’s) in Hagen (Germany). He also completed a 4-semester training course as a trainer in adult education. Manfred has published books for O'Reilly, Microsoft Press and Hanser and writes for Java Magazine, windows.developer and Heise Online. He regularly shares his knowledge at conferences.</p> <p>For his community work, Microsoft awarded him with the Most Valuable Professional (MVP) award and Google recognizes him as a Google Development Expert (GDE) for Angular.</p> <p>Link; [<a href=\"https://www.youtube.com/watch?v=gpNQIy5GXtw](https://www.youtube.com/watch?v=gpNQIy5GXtw\" class=\"embedded\">https://www.youtube.com/watch?v=gpNQIy5GXtw](https://www.youtube.com/watch?v=gpNQIy5GXtw</a>)</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":502235148,"highres_link":"https://secure.meetupstatic.com/photos/event/8/9/4/c/highres_502235148.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/8/9/4/c/600_502235148.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/8/9/4/c/thumb_502235148.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1638456214000,"duration":3600000,"id":"282448275","name":"Mutiny: hacking the imperative boat","date_in_series_pattern":false,"status":"past","time":1643297400000,"local_date":"2022-01-27","local_time":"16:30","updated":1643303177000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":10,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/282448275/","description":"<p>Mutiny: hacking the imperative boat</p> <p>Are you fed up with the complications of imperative message handling? Then it’s time for Mutiny, to seize control of your message pipeline and reclaim HMS Bounty! To help you get started, I will give a live demo how to convert an imperative message process to a reactive pipeline.</p> <p>Built on the foundations of the Eclipse MicroProfile reactive messaging specification, Mutiny places events at the core of its design. It is the engine behind all reactive features offered by Quarkus and helps you to create elegant and readable processing pipeline. Let’s open this treasure chest and take the gems home with us!</p> <p>Online link = <a href=\"https://www.youtube.com/watch?v=bXal-oqqNYU\" class=\"embedded\">https://www.youtube.com/watch?v=bXal-oqqNYU</a></p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":500575428,"highres_link":"https://secure.meetupstatic.com/photos/event/d/8/8/4/highres_500575428.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/d/8/8/4/600_500575428.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/d/8/8/4/thumb_500575428.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1626769825000,"duration":28800000,"id":"279585087","name":"Meet the Expert!","date_in_series_pattern":false,"status":"past","time":1630137600000,"local_date":"2021-08-28","local_time":"10:00","updated":1630168576000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":2,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/279585087/","description":"<p>Een dagje naar de Efteling?<br/>Ordina Software Development neemt jou mee!</p> <p>Wil jij onderdeel uitmaken van een gedreven High-Performance Team en aan de slag met de nieuwste softwaretechnologieën?<br/>Kom dan zaterdag 28 augustus langs voor een informele kennismaking in een “Wereld vol Verwondering”. En maak kennis met onze IT-experts in de Efteling!<br/>Zij vertellen je graag meer over wie wij zijn en al onze toffe projecten voor klanten.</p> <p>Kom jij Ordina ontmoeten in de Efteling en genieten van een dagje uit samen met jouw gezin of een vriend / vriendin?<br/>Neem contact op met Cindy Davids ([masked] of[masked]) en ontvang jouw persoonlijke uitnodiging.<br/>Uiteraard zijn de toegangskaartjes en parkeerkaart voor onze rekening.</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":497652342,"highres_link":"https://secure.meetupstatic.com/photos/event/3/0/3/6/highres_497652342.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/3/0/3/6/600_497652342.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/3/0/3/6/thumb_497652342.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1619115906000,"duration":7200000,"id":"277737066","name":"generate code.*","date_in_series_pattern":false,"status":"past","time":1622134800000,"local_date":"2021-05-27","local_time":"19:00","updated":1622147342000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":38,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/277737066/","description":"<p>Two talks about generating code for front-end applications!</p> <p>With Bart Kuijper and Martin van Es.</p> <p>## The Power of Demystifying your stack. Building a type-checker and state manager DIY-style.</p> <p>by Bart Kuijper</p> <p>As a programmer you will eventually land somewhere within what I call ‘the tower of abstraction’ (shows abstractions, machine code bottom, mendix top). But even if you land somewhere within a stack, you might feel topics can be too magical for your liking regardless of you using them successfully.</p> <p>Within this talk I want to share the power of demystifying, by tackling two topics that I was fortunate to demystify and how it made my understanding and joy grow. This talk is about appreciating abstractions made by others whilst also carefully breaking them apart.</p> <p>## GraphQL for the Lazy Developer</p> <p>by Martin van Es</p> <p>Always wanted to get started with GraphQL, but it seems too much of a hassle to get started with? What if you could set up a full-stack GraphQL application within 30 minutes? In this talk we will show exactly that, using code generation in the front-end and back-end.</p> <p>This talk is for you, if:</p> <p>* you finally want to get started with GraphQL;<br/>* and/or you are a front-end developer that needs a simple back-end;<br/>* and/or you are interested in graph data;<br/>* and/or you are interested in types/TypeScript.</p> <p>No prior knowledge of GraphQL is required.</p> <p>## Program<br/>19.00 \"The Power of Demystifying your stack\" by Bart Kuijper + Q&amp;A<br/>19.45 \"GraphQL for the Lazy Developer\" by Martin van Es + Q&amp;A<br/>20.30 end</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":495915853,"highres_link":"https://secure.meetupstatic.com/photos/event/3/d/e/d/highres_495915853.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/3/d/e/d/600_495915853.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/3/d/e/d/thumb_495915853.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1618221986000,"duration":2700000,"id":"277519447","name":"Meet the High Performance Team","date_in_series_pattern":false,"status":"past","time":1619103600000,"local_date":"2021-04-22","local_time":"17:00","updated":1619108967000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":7,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/277519447/","description":"<p>Dat klinkt goed toch?<br/>High Performance Team!<br/>Maar wat is een High Performance Team precies? Wat doet zo'n team en waarom zou ik daar meer van willen weten? Zou dat iets voor mij zijn?<br/>Teams zijn de toekomst en misschien wel jouw toekomst. Ben je nieuwsgierig hoe Software Development in een High Performance Team eruit ziet? Hoe je samen meer kan bereiken?<br/>Wil jij het free format vragen stellen, en het echte verhaal horen van leden uit 3 verschillende teams? Meld je dan aan voor deze meetup en dan zien we je de 22ste!<br/>Schrijf je in via; <a href=\"https://forms.gle/jG3qTd8B7HeexpAg8\" class=\"linkified\">https://forms.gle/jG3qTd8B7HeexpAg8</a></p> <p>Link voor vanavond;<br/><a href=\"https://teams.microsoft.com/dl/launcher/launcher.html?url=%2F_%23%2Fl%2Fmeetup-join%2F19%3Ameeting_YWNjNmFhY2MtM2E0NC00ZGVjLWE4NDAtZTJkNTg0ZWIwYmQ3%40thread.v2%2F0%3Fcontext%3D%257b%2522Tid%2522%253a%2522a254b169-0a6b-47f9-af4c-169704421c2e%2522%252c%2522Oid%2522%253a%2522c3b5506b-cd27-4543-9217-669bf0ea4003%2522%257d%26anon%3Dtrue&amp;type=meetup-join&amp;deeplinkId=90ecc516-6805-4ca9-a318-bd7d092d395d&amp;directDl=true&amp;msLaunch=true&amp;enableMobilePage=true&amp;suppressPrompt=true\" class=\"linkified\">https://teams.microsoft.com/dl/launcher/launcher.html?url=%2F_%23%2Fl%2Fmeetup-join%2F19%3Ameeting_YWNjNmFhY2MtM2E0NC00ZGVjLWE4NDAtZTJkNTg0ZWIwYmQ3%40thread.v2%2F0%3Fcontext%3D%257b%2522Tid%2522%253a%2522a254b169-0a6b-47f9-af4c-169704421c2e%2522%252c%2522Oid%2522%253a%2522c3b5506b-cd27-4543-9217-669bf0ea4003%2522%257d%26anon%3Dtrue&amp;type=meetup-join&amp;deeplinkId=90ecc516-6805-4ca9-a318-bd7d092d395d&amp;directDl=true&amp;msLaunch=true&amp;enableMobilePage=true&amp;suppressPrompt=true</a>.</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":495674316,"highres_link":"https://secure.meetupstatic.com/photos/event/3/7/e/c/highres_495674316.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/3/7/e/c/600_495674316.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/3/7/e/c/thumb_495674316.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1613377180000,"duration":7200000,"id":"276376306","name":"Ordina Software Development - Warzone event","date_in_series_pattern":false,"status":"past","time":1616092200000,"local_date":"2021-03-18","local_time":"19:30","updated":1616103652000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":4,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/276376306/","description":"<p>Op 18 maart 2021 vindt het grote Ordina Software Development Warzone event plaats.<br/>We spelen in teams van 4 waarbij je samen met je team de Warzone victory binnen gaat slepen.<br/>Er zijn toffe prijzen te winnen, denk hierbij aan;<br/>coach sessie met Nederlands beste Warzone speler (xSnijder)<br/>4x steam cadeaubon twv €20,-<br/>4x steam cadeaubon twv €10,-<br/>En voor de winnaar per game een Ordina Software Development champion pakket.</p> <p>Inschrijven kan via bijgaande link tot 13 maart aanstaande; <a href=\"https://lnkd.in/dkxbxUg\" class=\"linkified\">https://lnkd.in/dkxbxUg</a>.<br/>Wees er snel bij want vol = vol.</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":494764236,"highres_link":"https://secure.meetupstatic.com/photos/event/1/0/8/c/highres_494764236.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/1/0/8/c/600_494764236.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/1/0/8/c/thumb_494764236.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1609854653000,"duration":1800000,"id":"275559898","name":"What’s new in RxJS 7?","date_in_series_pattern":false,"status":"past","time":1610640000000,"local_date":"2021-01-14","local_time":"17:00","updated":1610644549000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":35,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/275559898/","description":"<p>RxJS; one of the most popular libraries is close to releasing a new major version. Version 7 is currently in beta but is expected to release early 2021. Martin will take you through all the new features and other changes of this upcoming release. Basic knowledge of RxJS might come in handy to fully understand the contents of this short talk.</p> <p>Martin van Dam is a Senior Frontend Software Engineer at Codestar. He is experienced in building Reactive Frontend applications by using modern technologies like TypeScript, React, RxJS and state management solutions.</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":494213692,"highres_link":"https://secure.meetupstatic.com/photos/event/d/1/b/c/highres_494213692.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/d/1/b/c/600_494213692.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/d/1/b/c/thumb_494213692.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1588926016000,"duration":1800000,"id":"270523474","name":"SSDLC from requirements to decommision","date_in_series_pattern":false,"status":"past","time":1589468400000,"local_date":"2020-05-14","local_time":"17:00","updated":1589474706000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":15,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/270523474/","description":"<p>Vulnerabilities in software are, just like all other bugs, more easy and cheaper to fix earlier in the development process.<br/>Then why start pen-testing for them just before going live?<br/>This talk will teach you about the many activities you can add to the software development process to prevent vulnerabilities.<br/>This enables you to build better quality software and increase the resilience of your organisation for those times you do get hacked.</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":490374281,"highres_link":"https://secure.meetupstatic.com/photos/event/d/4/0/9/highres_490374281.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/d/4/0/9/600_490374281.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/d/4/0/9/thumb_490374281.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1587048601000,"duration":1800000,"id":"270082945","name":"## What's new in Angular v9?","date_in_series_pattern":false,"status":"past","time":1587654000000,"local_date":"2020-04-23","local_time":"17:00","updated":1587658509000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":28,"is_online_event":true,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/270082945/","description":"<p>Angular as a framework moves fast and not everyone has the opportunity to keep track of all the latest features and changes. In this short talk, Bjorn will take you through the latest and greatest that Angular has to offer in version 9. From a short introduction to the new Ivy Renderer, to the deprecated and renewed unit testing methods and more!</p> <p>Bjorn Schijff is a Senior Frontend Engineer at Codestar that has been working with Angular since AngularJS and it's v2 beta. In his role as a developer, he's been able to keep the projects of his clients close to the bleeding edge of Angular and has personally experienced its up and downsides.</p> <p>Youtube link will follow soon!</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":490143317,"highres_link":"https://secure.meetupstatic.com/photos/event/c/f/5/highres_490143317.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/c/f/5/600_490143317.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/c/f/5/thumb_490143317.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1560187640000,"duration":14400000,"id":"262204252","name":"Bytes & Beats","rsvp_limit":50,"date_in_series_pattern":false,"status":"past","time":1566487800000,"local_date":"2019-08-22","local_time":"17:30","rsvp_close_offset":"PT48H","updated":1566506528000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":36,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/262204252/","description":"<p>Computers and software are intertwined with making music. Modern music would sound very different without synthesisers, samples and software sequencers. This time at Codestar Night, we want to explore some less obvious applications for software in music. We have two spectacular speakers, both developers and one of them a musician.</p> <p>Be prepared for smart scripts for music notation and live coding to create real-time music!</p> <p># Tidal by Alex McClean</p> <p>Alex has been making music with Haskell for many years, mainly with his free/open source environment TidalCycles (or Tidal for short; <a href=\"http://tidalcycles.org\" class=\"linkified\">http://tidalcycles.org</a>). He makes music by live coding with Tidal, most often at 'algoraves', where people dance to algorithmic music. Tidal applies pure functional reactive programming principles to represent musical pattern, providing a library of combinators for creating sequences and transforming them in strange ways.</p> <p>Alex will introduce and demonstrate Tidal, and also talk a little about his research work in weaving, where he uses Haskell to explore textile patterns rather than musical ones.</p> <p># Just Code It! by Hamza Haiken</p> <p>You want to code. Good. Now you need an idea. This talk is about inspiration: we'll find something to code, code it together and hopefully learn something along the way. On the menu today: coding a physical music box with punch cards! This will involve setting up a modern Python project, and learning about CLIs, basic music theory, some MIDI, and a bit of drawing. There will even be some types and a dash of poetry.</p> <p>Hamza is a backend developer at Codestar who likes to code wacky things and loves terminals, about which he gave talks at Devoxx and Code &amp; Comedy.</p> <p># Program<br/>22 August 2019<br/>17:30 Doors open and registration<br/>18:00 Food<br/>18:30 Talk 1<br/>19:30 Break<br/>20:00 Talk 2<br/>21:00 Drinks</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":482787398,"highres_link":"https://secure.meetupstatic.com/photos/event/6/b/0/6/highres_482787398.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/6/b/0/6/600_482787398.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/6/b/0/6/thumb_482787398.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1560503688000,"duration":28800000,"fee":{"accepts":"cash","amount":500,"currency":"EUR","description":"","label":"Price","required":false},"id":"262310961","name":"Workshop: AWS in a day","rsvp_limit":20,"date_in_series_pattern":false,"status":"past","time":1562310000000,"local_date":"2019-07-05","local_time":"09:00","rsvp_close_offset":"PT168H","updated":1562340343000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":5,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/262310961/","description":"<p>Codestar is hosting the Codecamp \"AWS in a day\" with AWS expert Niels Albers.</p> <p>In this one day workshop, you will learn about:</p> <p>* The overall AWS ecosystem<br/>* How to set up a front- and back-end architecture in AWS<br/>* Using AWS Lambda's to realize an infinitely scalable architecture<br/>* AWS API Gateway for API management<br/>* S3 for storage<br/>* Kinesis for streaming data<br/>* EKS for orchestrating your containerized applications with hosted Kubernetes</p> <p>Don't hesitate to contact us for more information!</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":482225008,"highres_link":"https://secure.meetupstatic.com/photos/event/1/3/9/0/highres_482225008.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/1/3/9/0/600_482225008.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/1/3/9/0/thumb_482225008.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1555060902000,"duration":14400000,"id":"260564012","name":"Advanced Kotlin","rsvp_limit":60,"date_in_series_pattern":false,"status":"past","time":1558625400000,"local_date":"2019-05-23","local_time":"17:30","rsvp_close_offset":"PT24H","updated":1558645748000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":44,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/260564012/","description":"<p>These talks are no introduction to Kotlin! We at Codestar love solving challenges with functional and reactive programming. Since Kotlin has been gaining traction we think it is time for some deepdives into elegant solutions to complex matters with Kotlin. We have two talks by developers from the Kotlin community, who have taken it to the next level.</p> <p># Contracts in Kotlin - by Hasan Serdar Çınar<br/>Kotlin 1.3 introduced built-in support for Contracts to improve smart casting. In this talk, we will discover the “Contract Programming” principles and real life implementations. We'll also focus on how Contracts can improve existing projects with the Design by Contract approach.</p> <p># About Serdar<br/>Serdar Cinar is a Principal Mobile Applications developer at Mobiquity with 8+ years of experience in iOS and Android development in various industries. Before mobile he worked as front-end and backend developer. As an Android developer he worked with Java for a long time and now, he Is developing Android apps with Kotlin since Android support started.</p> <p># Kotlin coroutines - by Joost de Vries<br/>Kotlin coroutines: what can you do with them, how do they work and how do they compare to futures and streams?</p> <p>Asynchronous and concurrent programming is hard. Over the years we have tried many things to deal with that: when threads and locks didn't work we tried Futures and Promises, Streams, Actors, you name it. In Kotlin (like in Go before) we can tackle this nasty problem with coroutines, which offer some clear benefits over the other ways of handling asynchronous programming. In this talk you'll learn how to use coroutines, how they work and how they compare to other ways of concurrent/reactive programming.</p> <p># About Joost<br/>Joost has been getting stuff done using functtional reactive programming in Scala and Typescript for 5 years. Most recently he has been working in the logistical domain on events first systems that use stream processing. He enjoys keeping up with the computer science of concurrent programming and distributed systems.<br/>When he’s not developing systems he likes to sing and play the saxophone. See also <a href=\"http://the-source.it/\" class=\"linkified\">http://the-source.it/</a></p> <p># PROGRAM</p> <p>23 May 2018<br/>17:30 Doors open and registration<br/>18:00 Food<br/>18:30 Talk 1<br/>19:30 Break<br/>20:00 Talk 2<br/>21:00 Drinks</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":480694411,"highres_link":"https://secure.meetupstatic.com/photos/event/8/6/6/b/highres_480694411.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/8/6/6/b/600_480694411.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/8/6/6/b/thumb_480694411.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1539329355000,"duration":12600000,"id":"255474882","name":"How To Get Your Site Hacked with Michael Kubiaczyk","rsvp_limit":100,"date_in_series_pattern":false,"status":"past","time":1544718600000,"local_date":"2018-12-13","local_time":"17:30","rsvp_close_offset":"PT48H","updated":1544736526000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":77,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/255474882/","description":"<p>The proof that secure programming does not have to be boring programming can be found in the talks by Michael from Secura. As a security expert, he tells about his experience with plenty of real life examples, making abstract security threats tangible and helping us to counteract them.</p> <p># Web Application Security Testing<br/>You have probably heard of Cross-Site Scripting and SQL Injection, maybe Phishing - or even all of the OWASP Top 10. But where do these vulnerabilities come from? How are they found by hackers, and how are they created by developers? In this session, we will discuss many of common web application security vulnerabilities, typical development mistakes leading to these issues, and how to use standard tools (such as Burp Suite Proxy) to find them before it's too late!</p> <p># Red-Teaming — What and How?<br/>Red Teaming is an exercise used by many of the most security-conscious and advanced enterprises, but what is the point? We will provide a brief introduction to many of the tools and goals of red teaming exercises, providing you with a basic toolkit with which your overall security posture can be tested. Afterwards, we will walk through an actual assignment which was executed by Secura, in which a developer laptop was obtained, compromised, and then used as a stepping stone into an organisation's network to get to the Crown Jewels!</p> <p># About Michael<br/>Michael has been working in the security industry for over 11 years, focusing on web application penetration testing and code review mostly within the financial sector. His experience includes working directly for international organisations in Canada, Ireland, The Netherlands, and Australia, as well as working for consulting firms and delivering security advice to small and medium sized organisations on a variety of topics. Michael is currently working for Secura (formerly known as Madison-Gurkha), delivering consulting service to a variety of leading organisations within the financial, government, and education sectors.</p> <p># Program<br/>13 December 2018<br/>17:30 Doors open and registration<br/>18:00 Food<br/>18:30 Talk 1<br/>19:30 Break<br/>20:00 Talk 2<br/>21:00 Drinks</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":475803191,"highres_link":"https://secure.meetupstatic.com/photos/event/c/7/7/highres_475803191.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/c/7/7/600_475803191.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/c/7/7/thumb_475803191.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1534080538000,"duration":12600000,"id":"253725271","name":"Scala 101 (2 evenings)","rsvp_limit":25,"date_in_series_pattern":false,"status":"past","time":1538409600000,"local_date":"2018-10-01","local_time":"18:00","updated":1538426953000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":25,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/253725271/","description":"<p>You undoubtedly know this functional JVM language, but what exactly is it, what can you do with it and where does the enthusiasm of its developers come from? In this training you will learn the basics of Functional Programming with Scala.</p> <p>In 2 evenings you will get a solid base to get started with Scala.</p> <p>For whom?<br/>• Especially for developers with Java experience</p> <p>By who?<br/>• Jan Ouwens (<a href=\"https://www.linkedin.com/in/janouwens/\" class=\"linkified\">https://www.linkedin.com/in/janouwens/</a>)<br/>• Donovan de Kuiper (<a href=\"https://www.linkedin.com/in/donovan-de-kuiper-8983536b/\" class=\"linkified\">https://www.linkedin.com/in/donovan-de-kuiper-8983536b/</a>)</p> <p>When?<br/>The training is split up in two parts:<br/>• Part 1: Monday, October 1 from 18:00 - 21:30<br/>• Part 2: Monday, October 8 from 18:00 - 21:30</p> <p>What is the location?<br/>• Ordina HQ, Ringwade 1, 3439 LM, Nieuwegein</p> <p>What will you learn?<br/>• You are able to read and write Scala code<br/>• You can apply concepts of functional programming<br/>• You can write unit tests in Scala<br/>• You can compile and import existing projects into your IDE<br/>• You can discover the rest of the Scala ecosystem independently</p> <p>Which topics are covered?<br/>• The syntax of Scala<br/>• Object-oriented concepts in Scala<br/>• Functional programming<br/>• Scala Collections<br/>• SBT and ScalaTest</p> <p>What does it cost?<br/>• € 0,00 (Free)</p> <p>How do I register?<br/>• Send a mail to [masked]</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":473683409,"highres_link":"https://secure.meetupstatic.com/photos/event/a/9/9/1/highres_473683409.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/a/9/9/1/600_473683409.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/a/9/9/1/thumb_473683409.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}},{"created":1531336367000,"duration":12600000,"id":"252677357","name":"Data Oriented Design with Maxim Zaks","rsvp_limit":80,"date_in_series_pattern":false,"status":"past","time":1537975800000,"local_date":"2018-09-26","local_time":"17:30","rsvp_close_offset":"PT52H30M","updated":1537997066000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":46,"is_online_event":false,"group":{"created":1465915067000,"name":"Codestar Night","id":20072875,"join_mode":"open","lat":52.099998474121094,"lon":5.110000133514404,"urlname":"Codestar-Night","who":"Codestars","localized_location":"Utrecht, Netherlands","state":"","country":"nl","region":"en_US","timezone":"Europe/Amsterdam"},"link":"https://www.meetup.com/codestar-night/events/252677357/","description":"<p>After a 🔥 summer we are in for some great talks by Maxim Zaks, who questions why we serialize data the way we do and goes into details on how to improve it. With the paradigms OOP and (our favorite) FP in mind, he will tell us about how to approach development using ECS. Will this turn out to be our new favorite?</p> <p># The nitty gritty of data serialisation<br/>In this talk we will have a close look at data and how we can serialise data for communication and persistence. We will discuss different techniques data serialisation formats employ and how to chose the one which suits you best.</p> <p># Entity Component System - a different approach to game / application development<br/>Entity Component System (ECS) is a software development pattern born in game development. Even though the concept is about 20 years old it is only now, that it is on the brink to becoming mainstream, thanks to the the efforts behind Unity3D game engine. We will discuss how the mental model behind ECS is different, compared to typical OOP and FP approaches and how ECS can help deliver high performance, high throughput interactive applications.</p> <p># About Maxim<br/>Maxim Zaks tells computers how to waste electricity. Hopefully in efficient, or at least useful way.<br/>He worked as IDE developer, Java Consultant in financial sector and mobile games / app developer.<br/>His current obsession is with data serialisation formats and data oriented design.<br/>More about Maxim: <a href=\"https://twitter.com/icex33\" class=\"linkified\">https://twitter.com/icex33</a></p> <p># Program<br/>26 September 2018<br/>17:30 Doors open and registration<br/>18:00 Food<br/>18:30 Talk 1<br/>19:30 Break<br/>20:00 Talk 2<br/>21:00 Drinks</p> ","visibility":"public","member_pay_fee":false,"featured_photo":{"id":473173755,"highres_link":"https://secure.meetupstatic.com/photos/event/3/5/b/b/highres_473173755.jpeg","photo_link":"https://secure.meetupstatic.com/photos/event/3/5/b/b/600_473173755.jpeg","thumb_link":"https://secure.meetupstatic.com/photos/event/3/5/b/b/thumb_473173755.jpeg","type":"event","base_url":"https://secure.meetupstatic.com"}}]},"__N_SSG":true}